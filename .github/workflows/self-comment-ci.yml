name: PR comment GitHub CI

on:
  issue_comment:
    types:
      - created
    branches-ignore:
      - main
  # TODO: remove
  # run_slow_v2
  pull_request:
    types: [synchronize]


# TODO: remove
#concurrency:
#  group: ${{ github.workflow }}-${{ github.event.issue.number }}-${{ startsWith(github.event.comment.body, 'run-slow') || startsWith(github.event.comment.body, 'run slow') || startsWith(github.event.comment.body, 'run_slow') }}
#  cancel-in-progress: true
permissions: read-all

env:
  HF_HOME: /mnt/cache
  TRANSFORMERS_IS_CI: yes
  OMP_NUM_THREADS: 8
  MKL_NUM_THREADS: 8
  RUN_SLOW: yes
  # For gated repositories, we still need to agree to share information on the Hub repo. page in order to get access.
  # This token is created under the bot `hf-transformers-bot`.
  HF_HUB_READ_TOKEN: ${{ secrets.HF_HUB_READ_TOKEN }}
  TF_FORCE_GPU_ALLOW_GROWTH: true
  CUDA_VISIBLE_DEVICES: 0,1


jobs:
  get-pr-number:
    name: Get PR number
    # TODO: remove
    # if: ${{ github.event.issue.state == 'open' && contains(fromJSON('["ydshieh", "ArthurZucker", "zucchini-nlp", "molbap", "gante", "LysandreJik", "Cyrilvallez", "Rocketknight1", "SunMarc", "eustlb", "MekkCyber", "vasqu", "ivarflakstad", "stevhliu", "ebezzam", "remi-or", "itazap"]'), github.actor) && (startsWith(github.event.comment.body, 'run-slow') || startsWith(github.event.comment.body, 'run slow') || startsWith(github.event.comment.body, 'run_slow')) }}
    uses: ./.github/workflows/get-pr-number.yml

  get-pr-info:
    name: Get PR commit SHA
    needs: get-pr-number
    if: ${{ needs.get-pr-number.outputs.PR_NUMBER != ''}}
    uses: ./.github/workflows/get-pr-info.yml
    with:
      pr_number: ${{ needs.get-pr-number.outputs.PR_NUMBER }}

  check-timestamps:
    runs-on: ubuntu-22.04
    needs: get-pr-info
    outputs:
      PR_HEAD_SHA: ${{ needs.get-pr-info.outputs.PR_HEAD_SHA }}
      PR_MERGE_SHA: ${{ needs.get-pr-info.outputs.PR_MERGE_COMMIT_SHA }}
    steps:
      - name: Verify the event timestamp against the issue comment date (timestamp)
        env:
          COMMENT_DATE: ${{ github.event.comment.created_at }}
          PR_MERGE_COMMIT_TIMESTAMP: ${{ needs.get-pr-info.outputs.PR_MERGE_COMMIT_TIMESTAMP }}
        # TODO: revert
        run: |
            echo "bon"
            echo "${{ needs.get-pr-info.outputs.PR_BASE_SHA }}"
            echo "${{ needs.get-pr-info.outputs.PR_HEAD_SHA }}"
            echo "${{ needs.get-pr-info.outputs.PR_MERGE_COMMIT_SHA }}"
            echo "${{ needs.get-pr-info.outputs.PR_MERGE_COMMIT_BASE_SHA }}"
#        run: |
#            COMMENT_TIMESTAMP=$(date -d "${COMMENT_DATE}" +"%s")
#            echo "COMMENT_DATE: $COMMENT_DATE"
#            echo "COMMENT_TIMESTAMP: $COMMENT_TIMESTAMP"
#            if [ $COMMENT_TIMESTAMP -le $PR_MERGE_COMMIT_TIMESTAMP ]; then
#              echo "Last commit on the pull request is newer than the issue comment triggering this run! Abort!";
#              exit -1;
#            fi

  # use a python script to handle this complex logic.
  # TODO: Avoid checkout and reuse `get-pr-info.yml`
  get-tests:
    runs-on: ubuntu-22.04
    needs: [get-pr-number, check-timestamps]
    outputs:
      models: ${{ steps.models_to_run.outputs.models }}
      quantizations: ${{ steps.models_to_run.outputs.quantizations }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          ref: "refs/pull/${{ needs.get-pr-number.outputs.PR_NUMBER }}/merge"

      - name: Verify merge commit SHA
        env:
          VERIFIED_PR_MERGE_SHA: ${{ needs.check-timestamps.outputs.PR_MERGE_SHA }}
        run: |
            PR_MERGE_SHA=$(git log -1 --format=%H)
            if [ $PR_MERGE_SHA != $VERIFIED_PR_MERGE_SHA ]; then
              echo "The merged commit SHA is not the same as the verified one! Security issue detected, abort the workflow!";
              exit -1;
            fi

      - name: Get models to test
        # TODO: revert
#        env:
#          PR_COMMENT: ${{ github.event.comment.body }}
        env:
          PR_COMMENT: "run-slow: vit, clip"
        run: |
          python -m pip install GitPython
          python utils/pr_slow_ci_models.py --message "$PR_COMMENT" | tee output.txt
          echo 'models=$(tail -n 1 output.txt)' >> $GITHUB_ENV
          python utils/pr_slow_ci_models.py --message "$PR_COMMENT" --quantization | tee output2.txt
          echo 'quantizations=$(tail -n 1 output2.txt)' >> $GITHUB_ENV

      - name: Show models to test
        id: models_to_run
        run: |
          echo "${{ env.models }}"
          echo "models=${{ env.models }}" >> $GITHUB_OUTPUT
          echo "${{ env.quantizations }}"
          echo "quantizations=${{ env.quantizations }}" >> $GITHUB_OUTPUT

  reply_to_comment:
    name: Reply to the comment
    if: ${{ needs.get-tests.outputs.models != '[]'  || needs.get-tests.outputs.quantizations != '[]' }}
    needs: [get-pr-number, get-tests]
    permissions:
      pull-requests: write
    runs-on: ubuntu-22.04
    steps:
      - name: Reply to the comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODELS: ${{ needs.get-tests.outputs.models }}
          BODY: '\n\nmodels: ${{ needs.get-tests.outputs.models }}\nquantizations: ${{ needs.get-tests.outputs.quantizations }}'
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/issues/${{ needs.get-pr-number.outputs.PR_NUMBER }}/comments \
            -f body="This comment contains run-slow, running the specified jobs: $(echo -e '${{ env.BODY }}')"

  create_run:
    name: Create run
    needs: [check-timestamps, reply_to_comment]
    permissions:
      statuses: write
    runs-on: ubuntu-22.04
    steps:
      - name: Create Run
        id: create_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Create a commit status (pending) for a run of this workflow. The status has to be updated later in `update_run_status`.
          # See https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status
          GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/statuses/${{ needs.check-timestamps.outputs.PR_HEAD_SHA }} \
            -f "target_url=$GITHUB_RUN_URL" -f "state=pending" -f "description=Slow CI job" -f "context=pytest/custom-tests"

  model-ci:
    name: Model CI
    if: ${{ needs.get-tests.outputs.models != '[]' }}
    uses: ./.github/workflows/self-scheduled.yml
    needs: [get-pr-number, check-timestamps, get-tests, create_run]
    with:
      job: run_models_gpu
      slack_report_channel: "#transformers-ci-pr"
      docker: huggingface/transformers-all-latest-gpu
      ci_event: pr
      report_repo_id: hf-internal-testing/transformers_pr_ci
      commit_sha: ${{ needs.check-timestamps.outputs.PR_MERGE_SHA }}
      subdirs: ${{ needs.get-tests.outputs.models }}
      pr_number: ${{ needs.get-pr-number.outputs.PR_NUMBER }}
    secrets: inherit

  quantization-ci:
    name: Quantization CI
    if: ${{ needs.get-tests.outputs.quantizations != '[]' }}
    uses: ./.github/workflows/self-scheduled.yml
    needs: [get-pr-number, check-timestamps, get-tests, create_run]
    with:
      job: run_quantization_torch_gpu
      slack_report_channel: "#transformers-ci-pr"
      docker: huggingface/transformers-quantization-latest-gpu
      ci_event: PR
      report_repo_id: hf-internal-testing/transformers_pr_ci
      commit_sha: ${{ needs.check-timestamps.outputs.PR_MERGE_SHA }}
      subdirs: ${{ needs.get-tests.outputs.quantizations }}
      pr_number: ${{ needs.get-pr-number.outputs.PR_NUMBER }}
    secrets: inherit

  check-outputs:
    name: Checkout new failures
    needs: [get-pr-number, model-ci, quantization-ci]
    permissions:
      pull-requests: write
    runs-on: ubuntu-22.04
    steps:
      - name: Get `run_models_gpu` job status
        run: |
          echo "${{ needs.model-ci.outputs.report }}"
          echo "${{ needs.quantization-ci.outputs.report }}"

      - name: Post results as PR comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_REPORT: ${{ needs.model-ci.outputs.report }}
          QUANT_REPORT: ${{ needs.quantization-ci.outputs.report }}
        run: |
          COMMENT_BODY=$(cat <<'EOF'
          ## CI Results
          
          ### Model CI Report
          \`\`\`json
          ${{ needs.model-ci.outputs.report }}
          \`\`\`
          
          ### Quantization CI Report
          \`\`\`json
          ${{ needs.quantization-ci.outputs.report }}
          \`\`\`
          EOF
          )
          
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/issues/${{ needs.get-pr-number.outputs.PR_NUMBER }}/comments \
            -f body="$COMMENT_BODY"

  update_run_status:
    name: Update Check Run Status
    needs: [check-timestamps, create_run, model-ci, quantization-ci]
    permissions:
      statuses: write
    if: ${{ always() && needs.create_run.result == 'success' }}
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      STATUS_OK: ${{ contains(fromJSON('["skipped", "success"]'), needs.model-ci.result) && contains(fromJSON('["skipped", "success"]'), needs.quantization-ci.result) }}
    steps:
      - name: Get `run_models_gpu` job status
        run: |
          echo "${{ needs.model-ci.result }}"
          echo "${{ needs.quantization-ci.result }}"
          echo $STATUS_OK
          if [ "$STATUS_OK" = "true" ]; then
            echo "STATUS=success" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Update PR commit statuses
        run: |
          echo "${{ needs.model-ci.result }}"
          echo "${{ env.STATUS }}"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/statuses/${{ needs.check-timestamps.outputs.PR_HEAD_SHA }} \
            -f "target_url=$GITHUB_RUN_URL" -f "state=${{ env.STATUS }}" -f "description=Slow CI job" -f "context=pytest/custom-tests"
